-- Create Data Base
CREATE DATABASE SOLE_HAVEN;

-- Use Databse
USE SOLE_HAVEN;

-- USERS TABLE
CREATE TABLE USERS (
  userId INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(50) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  role ENUM('developer', 'customer', 'owner', 'seller', 'admin') NOT NULL DEFAULT 'customer',
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

--PRODUCT Table
CREATE TABLE PRODUCTS (
  shoeId INT AUTO_INCREMENT PRIMARY KEY,
  brand ENUM('AVI', 'NIKE', 'PUMA', 'REEBOK', 'BATA', 'CATWALK', 'HUSH PUPPIES', 'METRO', 'SPARX', 'ACTION', 'LEE COOPER') NOT NULL,
  gender ENUM('MEN', 'WOMEN', 'UNISEX', 'BOYS', 'GIRLS') NOT NULL,
  category ENUM('Sneakers', 'Boots', 'Sandals', 'Loafers', 'Heels', 'School Shoes', 'Ballet Flats') NOT NULL,
  description TEXT NOT NULL,
  price DECIMAL(10, 2) NOT NULL,
  discount TINYINT DEFAULT 0,
  sku VARCHAR(20) UNIQUE NOT NULL,
  color VARCHAR(50) NOT NULL,
  weight VARCHAR(20) NOT NULL,
  url VARCHAR(255) NOT NULL,
  sellerId INT NOT NULL,
  productStatus ENUM('available','deleted') NOT NULL DEFAULT 'available',
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (sellerId) REFERENCES USERS(userId) ON DELETE CASCADE
);

--PRODUCT_SIZES Table
CREATE TABLE PRODUCT_SIZES (
  id INT AUTO_INCREMENT PRIMARY KEY,
  shoeId INT NOT  NULL,
  size INT NOT NULL,
  quantity INT NOT NULL DEFAULT 0 ,
  FOREIGN KEY (shoeId) REFERENCES PRODUCTS(shoeId) ON DELETE CASCADE
);

--RATING Table
CREATE TABLE RATING (
  ratingId INT AUTO_INCREMENT PRIMARY KEY,
  shoeId INT NOT NULL,
  userId INT NOT NULL,
  rating TINYINT NOT NULL CHECK (rating BETWEEN 1 AND 5),
  comment TEXT,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
  FOREIGN KEY (shoeId) REFERENCES PRODUCTS(shoeId) ON DELETE CASCADE,
  FOREIGN KEY (userId) REFERENCES USERS(userId) ON DELETE CASCADE,
    
  UNIQUE KEY unique_rating (shoeId, userId) 
);

-- COUPON Table
CREATE TABLE COUPONS (
  couponId INT AUTO_INCREMENT PRIMARY KEY,
  couponCode VARCHAR(10) UNIQUE NOT NULL,
  maxDiscount DECIMAL(10, 2) NOT NULL,
  minBill DECIMAL(10, 2) NOT NULL,
  validTill DATE NOT NULL,
  isActive BOOLEAN DEFAULT TRUE,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- ORDERS TABLE
CREATE TABLE ORDERS (
  orderId INT AUTO_INCREMENT PRIMARY KEY,
  userId INT NOT NULL,
  totalAmount DECIMAL(10, 2) NOT NULL,
  couponCode VARCHAR(20), 
  discount DECIMAL(10, 2) DEFAULT 0,
  fName VARCHAR(30) NOT NULL,
  lName VARCHAR(30) NOT NULL,
  email VARCHAR(50),
  mobile VARCHAR(12) NOT NULL,
  street VARCHAR(50) NOT NULL,
  apt VARCHAR(50),
  city VARCHAR(30) NOT NULL,
  province ENUM('Central', 'Eastern', 'North Central', 'Northern', 'North Western', 'Sabaragamuwa', 'Southern', 'Uva', 'Western') NOT NULL,
  postal VARCHAR(8) NOT NULL,
  notes TEXT,
  status ENUM('PENDING', 'CONFIRMED', 'CANCELLED', 'SHIPPED', 'DELIVERED', 'FAILED') DEFAULT 'PENDING',
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  FOREIGN KEY (userId) REFERENCES USERS(userId),
  FOREIGN KEY (couponCode) REFERENCES COUPONS(couponCode)
);

-- ORDER ITEMS
CREATE TABLE ORDER_ITEMS (
  id INT AUTO_INCREMENT PRIMARY KEY,
  orderId INT NOT NULL,
  shoeId INT NOT NULL,
  size INT NOT NULL,
  quantity INT NOT NULL,
  
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  FOREIGN KEY (orderId) REFERENCES ORDERS(orderId),
  FOREIGN KEY (shoeId) REFERENCES PRODUCTS(shoeId)
);

-- PAYMENTS Table
CREATE TABLE PAYMENTS (
  paymentId INT AUTO_INCREMENT PRIMARY KEY,
  userId INT NOT NULL,
  orderId INT NOT NULL,
  amount DECIMAL(10, 2) NOT NULL,
  method ENUM('CARD', 'CASH') DEFAULT 'CARD',
  status ENUM('PENDING', 'SUCCESS', 'FAILED') DEFAULT 'PENDING',
  referenceId VARCHAR(100) DEFAULT NULL,
  paidAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

  FOREIGN KEY (userId) REFERENCES USERS(userId),
  FOREIGN KEY (orderId) REFERENCES ORDERS(orderId)
);
